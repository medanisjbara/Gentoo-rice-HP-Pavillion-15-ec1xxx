static const int sloppyfocus        = 0;
/* 1 means idle inhibitors will disable idle tracking
 * even if it's surface isn't visible */
static const int bypass_surface_visibility = 0;  
static const unsigned int borderpx  = 4;
static const int lockfullscreen     = 1;  /* 1 will force focus on the fullscreen window */
static const unsigned int gappih    = 10;       /* horiz inner gap between windows */
static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
static const unsigned int gappov    = 10;       /* vert outer gap between windows and screen edge */
static const int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
static const int monoclegaps        = 0;        /* 1 means outer gaps in monocle layout */
static const float rootcolor[]      = {0.3, 0.3, 0.3, 1.0};
static const float bordercolor[]    = {0.5, 0.5, 0.5, 1.0};
static const float focuscolor[]     = {5.0, 5.0, 1.0, 1.0};
/* To conform the xdg-protocol, set the alpha to zero to restore the old behavior */
static const float fullscreen_bg[]  = {0.1, 0.1, 0.1, 1.0};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };

static const Rule rules[] = {
     /* app_id     title       tags mask     isfloating   monitor */
     /* examples:
     { "Gimp",     NULL,       0,            1,           -1 },
     { "chromium",  NULL,       1 << 4,       0,           -1 },
     { "swayimg",  NULL,       0,            1,           -1 },
     */
     { "chromium", NULL,  1 ,  0, -1 },
     { "firefox", NULL,  1 ,  0, -1 },
};

/* layout(s) */
static const Layout layouts[] = {
     /* symbol     arrange function */
     { "[]=",      tile },
     { "><>",      NULL },    /* no layout function means floating behavior */
     { "[M]",      monocle },
     { "launcher", NULL },
};

/* monitors */
static const MonitorRule monrules[] = {
     /* name       mfact nmaster scale layout       rotate/reflect */
     /* example of a HiDPI laptop monitor:
     { "eDP-1",    0.5,  1,      2,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL },
     */
     /* defaults */
     { NULL,       0.55, 1,      0.89,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL },
};

/* keyboard */
static const struct xkb_rule_names xkb_rules = {
     /* can specify fields: rules, model, layout, variant, options */
     /* example:
     .options = "ctrl:nocaps",
     */
     .layout = "fr",
     .options = NULL,
};

static const int numlock = 1;
static const int capslock = 0;

static const int repeat_rate = 25;
static const int repeat_delay = 600;

/* Trackpad */
static const int tap_to_click = 1;
static const int tap_and_drag = 1;
static const int drag_lock = 1;
static const int natural_scrolling = 1;
static const int disable_while_typing = 1;
static const int left_handed = 0;
static const int middle_button_emulation = 0;
/* You can choose between:
LIBINPUT_CONFIG_SCROLL_NO_SCROLL
LIBINPUT_CONFIG_SCROLL_2FG
LIBINPUT_CONFIG_SCROLL_EDGE
LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN
*/
static const enum libinput_config_scroll_method scroll_method = LIBINPUT_CONFIG_SCROLL_2FG;

/* You can choose between:
LIBINPUT_CONFIG_CLICK_METHOD_NONE       
LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS       
LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER 
*/
static const enum libinput_config_click_method click_method = LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS;

/* You can choose between:
LIBINPUT_CONFIG_SEND_EVENTS_ENABLED
LIBINPUT_CONFIG_SEND_EVENTS_DISABLED
LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE
*/
static const uint32_t send_events_mode = LIBINPUT_CONFIG_SEND_EVENTS_ENABLED;

/* You can choose between:
LIBINPUT_CONFIG_ACCEL_PROFILE_FLAT
LIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE
*/
static const enum libinput_config_accel_profile accel_profile = LIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE;
static const double accel_speed = 0.0;

/* You can choose between:
LIBINPUT_CONFIG_TAP_MAP_LRM -- 1/2/3 finger tap maps to left/right/middle
LIBINPUT_CONFIG_TAP_MAP_LMR -- 1/2/3 finger tap maps to left/middle/right
*/
static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TAP_MAP_LRM;

/* Autostart */
static const char *const autostart[] = {
     "sh", "-c", "bgup", NULL,
     "sh", "-c", "pipewire", NULL,
     "sh", "-c", "while true; do test -p $XDG_RUNTIME_DIR/somebar-0 && status_command status > $XDG_RUNTIME_DIR/somebar-0 ; sleep 0.3 ; done", NULL,
     "sh", "-c", "pactl set-source-volume @DEFAULT_SOURCE@ 40%", NULL,
     "sh", "-c", "brightnessctl set 20%", NULL,
     "sh", "-c", "wl-paste --watch cliphist store", NULL,
     "sh", "-c", "dunst", NULL,
     "sh", "-c", "todo", NULL,
     NULL /* terminate */
};
 

/* If you want to use the windows key change this to WLR_MODIFIER_LOGO */
#define MODKEY WLR_MODIFIER_LOGO
#define TAGKEYS(KEY,SKEY,TAG) \
     { MODKEY,                    KEY,            view,            {.ui = 1 << TAG} }, \
     { MODKEY|WLR_MODIFIER_CTRL,  KEY,            toggleview,      {.ui = 1 << TAG} }, \
     { MODKEY|WLR_MODIFIER_SHIFT, SKEY,           tag,             {.ui = 1 << TAG} }, \
     { MODKEY|WLR_MODIFIER_CTRL|WLR_MODIFIER_SHIFT,SKEY,toggletag, {.ui = 1 << TAG} }

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *termcmd   [ ] = { "alacritty", NULL };
static const char *term2cmd  [ ] = { "kitty", NULL };
static const char *menucmd   [ ] = { "bemenu-run", "-H", "25", NULL };

static const char *briup     [ ] = { "brightnessctl", "set", "5%+", NULL};
static const char *bridown   [ ] = { "brightnessctl", "set", "5%-", NULL};

static const char *volup     [ ] = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "+5%", NULL};
static const char *voldown   [ ] = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "-5%", NULL};
static const char *voltog    [ ] = { "pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle", NULL};
static const char *micup     [ ] = { "pactl", "set-source-volume", "@DEFAULT_SOURCE@", "+1%", NULL};
static const char *micdown   [ ] = { "pactl", "set-source-volume", "@DEFAULT_SOURCE@", "-1%", NULL};
static const char *mictog    [ ] = { "pactl", "set-source-mute", "@DEFAULT_SOURCE@", "toggle", NULL};

static const char *mpp       [ ] = { "playerctl", "play-pause", NULL };
static const char *mpn       [ ] = { "playerctl", "next", NULL };
static const char *mpb       [ ] = { "playerctl", "previous", NULL };

static const char *SS        [ ] = { "grimshot", "copy", NULL};
static const char *areaSS    [ ] = { "grimshot", "copy", "area", NULL};

static const char *SSsave    [ ] = { "grimshot", "save", NULL};
static const char *areaSSave [ ] = { "grimshot", "save", "area", NULL};

static const char *cliphist  [ ] = { "sh", "-c", "cliphist list | bemenu -H 25 | cliphist decode | wl-copy", NULL };

static const char *browser   [ ] = { "firefox-bin", NULL};
static const char *mpvid     [ ] = { "sh", "-c", "mpv \"$(wl-paste)\"", NULL };
static const char *mpvaud    [ ] = { "sh", "-c", "mpv \"$(wl-paste)\" --ytdl-format=bestaudio", NULL };
static const char *rd        [ ] = { "sh", "-c", "rd", NULL };
static const char *rdF       [ ] = { "sh", "-c", "rd -F", NULL };
static const char *s2ram     [ ] = { "sh", "-c", "chvt2;; s2ram; chvt1", NULL };
static const char *bgup      [ ] = { "bgup" };


static const Key keys[] = {
     /* modifier                                        key                     function              argument */
     // Essencial
     { MODKEY,                                          XKB_KEY_j,              focusstack,           {.i = +1}                   },
     { MODKEY,                                          XKB_KEY_k,              focusstack,           {.i = -1}                   },
     { MODKEY,                                          XKB_KEY_i,              incnmaster,           {.i = +1}                   },
     { MODKEY,                                          XKB_KEY_d,              incnmaster,           {.i = -1}                   },
     { MODKEY,                                          XKB_KEY_h,              setmfact,             {.f = -0.05}                },
     { MODKEY,                                          XKB_KEY_l,              setmfact,             {.f = +0.05}                },
     { MODKEY,                                          XKB_KEY_Return,         zoom,                 {0}                         },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_C,              killclient,           {0}                         },
     { MODKEY,                                          XKB_KEY_e,              togglefullscreen,     {0}                         },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_space,          togglefloating,       {0}                         },
     // Layouts
     { MODKEY,                                          XKB_KEY_t,              setlayout,            {.v = &layouts[0]}          },
     { MODKEY,                                          XKB_KEY_f,              setlayout,            {.v = &layouts[1]}          },
     { MODKEY,                                          XKB_KEY_m,              setlayout,            {.v = &layouts[2]}          },
     { MODKEY,                                          XKB_KEY_x,              setlayout,            {.v = &layouts[3]}          },
     { MODKEY,                                          XKB_KEY_space,          setlayout,            {0}                         },
     // Expantions
     { MODKEY,                                          XKB_KEY_F6,             spawn,                {.v = voltog   }            },
     { MODKEY,                                          XKB_KEY_F7,             spawn,                {.v = voldown  }            },
     { MODKEY,                                          XKB_KEY_F8,             spawn,                {.v = volup    }            },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_F6,             spawn,                {.v = mictog   }            },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_F7,             spawn,                {.v = micdown  }            },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_F8,             spawn,                {.v = micup    }            },
     { MODKEY,                                          XKB_KEY_F2,             spawn,                {.v = bridown  }            },
     { MODKEY,                                          XKB_KEY_F3,             spawn,                {.v = briup    }            },
     { MODKEY,                                          XKB_KEY_F9,             spawn,                {.v = mpb      }            },
     { MODKEY,                                          XKB_KEY_F10,            spawn,                {.v = mpp      }            },
     { MODKEY,                                          XKB_KEY_F11,            spawn,                {.v = mpn      }            },
     { WLR_MODIFIER_ALT,                                XKB_KEY_Print,          spawn,                {.v = SS       }            },
     { WLR_MODIFIER_SHIFT,                              XKB_KEY_Print,          spawn,                {.v = areaSS   }            },
     { WLR_MODIFIER_CTRL,                               XKB_KEY_Print,          spawn,                {.v = SSsave   }            },
     { WLR_MODIFIER_CTRL|WLR_MODIFIER_SHIFT,            XKB_KEY_Print,          spawn,                {.v = areaSSave}            },
     { MODKEY|WLR_MODIFIER_CTRL,                        XKB_KEY_s,              spawn,                {.v = s2ram    }            },
     // Launchers
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_Return,         spawn,                {.v = termcmd  }            },
     { MODKEY|WLR_MODIFIER_CTRL,                        XKB_KEY_Return,         spawn,                {.v = term2cmd }            },
     { MODKEY,                                          XKB_KEY_b,              spawn,                {.v = menucmd  }            },
     { WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,              XKB_KEY_b,              spawn,                {.v = browser  }            },
     // Misc
     { MODKEY,                                          XKB_KEY_p,              spawn,                {.v = mpvid    }            },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_P,              spawn,                {.v = mpvaud   }            },
     { MODKEY,                                          XKB_KEY_r,              spawn,                {.v = rd       }            },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_R,              spawn,                {.v = rdF      }            },
     { MODKEY,                                          XKB_KEY_c,              spawn,                {.v = cliphist }            },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_B,              spawn,                {.v = bgup     }            },

     // Garbage
     /// GAPS
     { MODKEY,                                          XKB_KEY_y,              incihgaps,            {.i = +20 }                  },
     { MODKEY,                                          XKB_KEY_o,              incihgaps,            {.i = -20 }                  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_Y,              incovgaps,            {.i = +10 }                  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_O,              incovgaps,            {.i = -10 }                  },

     // Unused
/*
     { MODKEY,                                          XKB_KEY_Tab,            view,                 {0}                         },
     { MODKEY,                                          XKB_KEY_0,              togglegaps,           {0}                         },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_H,              incogaps,             {.i = +20 }                  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_L,              incogaps,             {.i = -20 }                  },
     { MODKEY|WLR_MODIFIER_CTRL,                        XKB_KEY_h,              incigaps,             {.i = +35 }                  },
     { MODKEY|WLR_MODIFIER_CTRL,                        XKB_KEY_l,              incigaps,             {.i = -35 }                  },
     { MODKEY|WLR_MODIFIER_CTRL,                        XKB_KEY_y,              incivgaps,            {.i = +10 }                  },
     { MODKEY|WLR_MODIFIER_CTRL,                        XKB_KEY_o,              incivgaps,            {.i = -10 }                  },
     { MODKEY|WLR_MODIFIER_LOGO,                        XKB_KEY_y,              incohgaps,            {.i = +10 }                  },
     { MODKEY|WLR_MODIFIER_LOGO,                        XKB_KEY_o,              incohgaps,            {.i = -10 }                  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_degree,         defaultgaps,          {0}                         },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_Left,           focusmon,             {.i = WLR_DIRECTION_LEFT}   },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_Right,          focusmon,             {.i = WLR_DIRECTION_RIGHT}  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_question,       tagmon,               {.i = WLR_DIRECTION_LEFT}   },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_period,         tagmon,               {.i = WLR_DIRECTION_RIGHT}  },
*/


     // Tests
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_K,              incgaps,              {.i = +30 }                  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_J,              incgaps,              {.i = -30 }                  },

     // tag keys
     { MODKEY,                                          XKB_KEY_agrave,         view,                 {.ui = ~0}                  },
     { MODKEY|WLR_MODIFIER_SHIFT,                       XKB_KEY_0,              tag,                  {.ui = ~0}                  },
     TAGKEYS(          XKB_KEY_ampersand,   XKB_KEY_1,                0),
     TAGKEYS(          XKB_KEY_eacute,      XKB_KEY_2,                1),
     TAGKEYS(          XKB_KEY_quotedbl,    XKB_KEY_3,                2),
     TAGKEYS(          XKB_KEY_apostrophe,  XKB_KEY_4,                3),
     TAGKEYS(          XKB_KEY_parenleft,   XKB_KEY_5,                4),
     TAGKEYS(          XKB_KEY_minus,       XKB_KEY_6,                5),
     TAGKEYS(          XKB_KEY_egrave,      XKB_KEY_7,                6),
     TAGKEYS(          XKB_KEY_underscore,  XKB_KEY_8,                7),
     TAGKEYS(          XKB_KEY_ccedilla,    XKB_KEY_9,                8),
     // quit
     { MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Q,          quit,           {0} },

     /* Ctrl-Alt-Backspace and Ctrl-Alt-Fx used to be handled by X server */
     { WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_Terminate_Server, quit, {0} },
#define CHVT(n) { WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_XF86Switch_VT_##n, chvt, {.ui = (n)} }
     CHVT(1), CHVT(2), CHVT(3), CHVT(4), CHVT(5), CHVT(6),
     CHVT(7), CHVT(8), CHVT(9), CHVT(10), CHVT(11), CHVT(12),
};

static const Button buttons[] = {
     { MODKEY, BTN_LEFT,   moveresize,     {.ui = CurMove} },
     { MODKEY, BTN_MIDDLE, togglefloating, {0} },
     { MODKEY, BTN_RIGHT,  moveresize,     {.ui = CurResize} },
};

